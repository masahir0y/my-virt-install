#!/usr/bin/env python3

import argparse
import configparser
import os
import subprocess
import sys
import tempfile
import shutil

this_dir = os.path.dirname(__file__)

IMAGE_DIR = os.path.join(this_dir, 'images')
KS_DIR = os.path.join(this_dir, 'ks')
DISTRO_CONFIG = os.path.join(this_dir, 'distro.ini')
DOMAIN_CONFIG = os.path.join(this_dir, 'domain.ini')

def get_image_path(distro):
    url = distro['url']
    image_path = os.path.join(IMAGE_DIR, os.path.split(url)[1])

    if not os.path.exists(image_path):
        print("{} does not exit. Need to download...".format(image_path))

        if not os.path.exists(IMAGE_DIR):
            os.makedirs(IMAGE_DIR)
        run_command(['wget', url], cwd=IMAGE_DIR)

    return image_path


def run_command(cmd, cwd=None):
    print('Running "{}"'.format(' '.join(cmd)))

    ret_code = subprocess.call(cmd, cwd=cwd)
    if ret_code:
        print("failed with retcode {0}".format(ret_code), file=sys.stderr)


def clean(name):

    stat = subprocess.run(['virsh', 'domstate', name], capture_output=True,
                          encoding='utf8')

    if stat.returncode != 0:
        # this domain does not exist
        return

    if stat.stdout.rstrip() == 'running':
        print('stopping {}'.format(name))
        run_command(['virsh', 'destroy', name])

    run_command(['virsh', 'undefine', name])
    run_command(['virsh', 'vol-delete', '--pool=default', '{}.qcow2'.format(name)])


def generate_ks(ks_path, name, config, distro):

    print('Generating kickstartfile: {}'.format(ks_path))

    out = open(ks_path, 'w')

    for line in open(os.path.join(KS_DIR, distro['ks'])):
        line = line.replace('@hostname@', name)
        line = line.replace('@mac@', config['mac'])
        line = line.replace('@ip@', config['ip'])
        out.write(line)


def install(name, args, config, distro):
    extra_args = []
    tempdir = ''

    cmd = ['virt-install',
           '--name={}'.format(name),
           '--vcpus={}'.format(config['cpus']),
           '--ram={}'.format(config['ram']),
           '--disk', 'size={},bus=virtio'.format(config['disksize']),
           '--network', 'network={},mac={}'.format(config['network'], config['mac']),
           '--location', get_image_path(distro),
           '--accelerate',
           '--hvm']

    if not args.graphics:
        cmd.append('--nographics')
        extra_args.append('console=ttyS0')

    if not args.no_ks:
        tempdir = tempfile.mkdtemp()
        ks_path = os.path.join(tempdir, 'ks.cfg')

        generate_ks(ks_path, name, config, distro)
        cmd.append('--initrd-inject={}'.format(ks_path))
        extra_args.append('inst.ks=file:/{}'.format('ks.cfg'))

    if extra_args:
        cmd.append('--extra-args')
        cmd.append(' '.join(extra_args))

    run_command(cmd)

    if ks_path:
        shutil.rmtree(tempdir)


def main():
    parser = argparse.ArgumentParser(description='Create a virtual machine')

    parser.add_argument('-c', '--clean', action='store_true',
                        help='clean')

    parser.add_argument('-f', '--force', action='store_true',
                        help='overwrite existing domain(s)')

    parser.add_argument('-g', '--graphics', action='store_true',
                        help='GUI mode')

    parser.add_argument('-K', '--no-ks', action='store_true',
                        help='do not use kickstart file')

    parser.add_argument('domains', type=str, nargs='+',
                        help='names of virtual machines to create')

    args = parser.parse_args()

    distro_config = configparser.ConfigParser()
    distro_config.read(DISTRO_CONFIG)
    domain_config = configparser.ConfigParser()
    domain_config.read(DOMAIN_CONFIG)

    for name in args.domains:

        if args.clean:
            clean(name)
        else:
            if args.force:
                clean(name)

            if name in domain_config:
                config = domain_config[name]
            else:
                config = domain_config['DEFAULT']

            distro = distro_config[config['distro']]

            install(name, args, config, distro)


if __name__ == '__main__':
    main()
